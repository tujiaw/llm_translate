---
description:
globs:
alwaysApply: false
---
# 存储与设置管理

本项目使用Chrome的存储API进行设置管理，主要保存用户的模型选择和API密钥等配置。

## 存储项目

插件使用`chrome.storage.sync`进行设置存储，主要存储以下项目：

- `model`: 当前选择的模型名称
- `customModelName`: 自定义模型名称
- `customModelEndpoint`: 自定义模型API端点
- `apiKey`: API密钥
- `defaultApiEndpoint`: 默认API端点

这些设置存储在浏览器的同步存储中，可以在用户的不同设备间同步。

## 默认设置

在[background.js](mdc:background.js)和[popup.js](mdc:popup.js)中定义了默认设置：

```javascript
{
  model: 'THUDM/GLM-4-9B-0414',
  customModelName: '',
  customModelEndpoint: '',
  apiKey: 'sk-yhszqcrexlxohbqlqjnxngoqenrtftzxvuvhdqzdjydtpoic',
  defaultApiEndpoint: 'https://api.siliconflow.cn/v1/chat/completions'
}
```

## 设置加载与保存

### 加载设置

在[popup.js](mdc:popup.js)中的`loadSettings()`函数加载设置：

```javascript
function loadSettings() {
  chrome.storage.sync.get(
    {
      model: 'THUDM/GLM-4-9B-0414',
      customModelName: '',
      customModelEndpoint: '',
      apiKey: 'sk-yhszqcrexlxohbqlqjnxngoqenrtftzxvuvhdqzdjydtpoic',
      defaultApiEndpoint: 'https://api.siliconflow.cn/v1/chat/completions'
    }, 
    function(items) {
      // 将加载的设置应用到UI
      modelSelect.value = items.model;
      customModelName.value = items.customModelName;
      customModelEndpoint.value = items.customModelEndpoint;
      apiKey.value = items.apiKey;
      
      // 根据模型类型显示/隐藏自定义配置
      if (items.model === 'custom') {
        customModelConfig.classList.remove('hidden');
      } else {
        customModelConfig.classList.add('hidden');
      }
    }
  );
}
```

### 保存设置

在[popup.js](mdc:popup.js)中的`saveSettings()`函数保存设置：

```javascript
function saveSettings() {
  const model = modelSelect.value;
  const customModelNameValue = customModelName.value;
  const customModelEndpointValue = customModelEndpoint.value;
  const apiKeyValue = apiKey.value;
  
  chrome.storage.sync.set({
    model: model,
    customModelName: customModelNameValue,
    customModelEndpoint: customModelEndpointValue,
    apiKey: apiKeyValue
  }, function() {
    // 显示保存成功提示
    const saveStatus = document.createElement('div');
    saveStatus.textContent = '设置已保存';
    saveStatus.style.color = 'green';
    saveStatus.style.textAlign = 'center';
    saveStatus.style.marginTop = '5px';
    
    saveSettingsBtn.insertAdjacentElement('afterend', saveStatus);
    
    setTimeout(() => {
      saveStatus.remove();
    }, 2000);
  });
}
```

## 使用设置

在进行翻译操作时，[background.js](mdc:background.js)和[popup.js](mdc:popup.js)中的翻译函数会先从存储中获取当前设置，然后据此构建API请求。
