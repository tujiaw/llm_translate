---
description:
globs:
alwaysApply: false
---
# 翻译功能流程

本项目的核心功能是使用大语言模型进行文本翻译，主要有三种触发方式和处理流程。

## 翻译流程概述

1. **获取文本** - 通过选择网页内容、右键菜单或输入框获取要翻译的文本
2. **检测语言** - 使用正则表达式`/[\u4e00-\u9fa5]/.test(text)`检测是否包含中文
3. **设置提示词** - 根据语言类型设置相应的system prompt
4. **选择模型与配置** - 获取用户选择的模型和API密钥
5. **构建API请求** - 根据不同模型构建相应的请求体
6. **发送API请求** - 向相应的API端点发送请求
7. **解析响应** - 解析API返回的结果
8. **显示翻译** - 将翻译结果展示给用户

## 触发方式

### 1. 弹出窗口翻译

在[popup.js](mdc:popup.js)中的`translateText()`函数处理此流程：
- 用户在弹出窗口输入文本并点击翻译按钮
- 从存储中获取模型配置
- 构建API请求并发送
- 解析响应并显示在输出文本区域

### 2. 选择文本弹出按钮翻译

在[content.js](mdc:content.js)中处理：
- `mouseup`事件监听器检测用户选择的文本
- `createTranslateButton()`函数创建翻译按钮
- 点击按钮时通过`chrome.runtime.sendMessage()`发送消息到后台脚本
- 显示加载弹窗
- 接收后台脚本发回的翻译结果
- `handleTranslation()`函数更新弹窗显示翻译结果

### 3. 右键菜单翻译

在[background.js](mdc:background.js)中处理：
- 插件安装时通过`chrome.contextMenus.create()`创建右键菜单选项
- `chrome.contextMenus.onClicked`监听器处理菜单点击事件
- 调用`performTranslation()`函数处理翻译
- 将结果通过`chrome.tabs.sendMessage()`发送回内容脚本显示

## 语言检测与翻译方向

语言检测使用中文字符范围正则表达式：
```javascript
const isChineseQuery = /[\u4e00-\u9fa5]/.test(text);
```

翻译方向根据检测结果设置不同的system prompt：
```javascript
const systemPrompt = isChineseQuery 
  ? "你是一个翻译助手，请将以下中文文本翻译成英文，保持原文的意思、格式和语气。只输出翻译结果，不要有任何解释或额外内容。" 
  : "你是一个翻译助手，请将以下英文文本翻译成中文，保持原文的意思、格式和语气。只输出翻译结果，不要有任何解释或额外内容。";
```
